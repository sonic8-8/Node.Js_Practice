part1

1강 Node.js가 뭐임?

자바스크립트 실행엔진
구글이 성능 좋게 만든 웹브라우저 실행엔진이 V8인데
이게 너무 좋음 그래서 똑 떼어냈는데 이 똑 떼어낸 V8엔진을 NodeJs라고 부르기 시작함
그래서 NodeJs를 자바스크립트 런타임이라고도 부릅니다 ( 쉽게 말해서 자바스크립트 실행기임 )
NodeJs의 장점은 non-blocking 즉, 비동기 처리를 잘한다는 것인데
비동기처리를 하면 좋은 점은 순서대로 일처리를 하지 않는다는 것임
1. 요청부터 먼저 받음
2. 빠르게 처리되는 순서대로 결과를 보내줌
동기처리로 일을 하게 되면 모든 일이 1초씩 걸리는일을 할 경우는 크게 상관 없을 수 있지만
만약 중간에 2분 걸리는 일을 시켜버리면 2분동안 다른일을 아예 수행하지 못하고 기다리고 있어야합니다
비동기처리 방식은 이런일이 없음
서버 성능을 높이기 위해서 CPU 성능을 높이거나 스레드 개수를 늘려도 되지만
NodeJs는 싱글 스레드라서 이미지 변환이나 동영상 편집, 숫자 계산같은 무거운 일들을 수행하기 보단
자잘하지만 많은 일을 처리하는데 적합하구요

--------------------------------------------------------

2강 설치 및 express 프레임워크 설치하기

터미널 열어서 node.js 세팅 및 express 설치
1. npm init -y
2. npm install express

--------------------------------------------------------

3강 간단한 서버 기능 개발

express 프레임워크 사용하지않고 서버 띄우는 방법

const http = require('http');

http.createServer((요청, 응답) => {

}).listen(3000)

--------------------------------------------------------

express 프레임워크 사용해서 서버 띄우는 방법

const express = require('express')
const app = express()

app.listen(8080, () => {
    console.log('http://www.localhost8080에서 서버 실행중');
})

app.get('/', (요청, 응답) => {

})

이제 터미널에
node [파일명] 명령내리면 실행해줍니다

--------------------------------------------------------

4강 웹페이지 보내주기 (라우팅)

arrow function
콜백함수를 () => {}로 축약해서 표현가능

html 문서를 보내주고 싶다면
send가 아니라 sendFile 메서드를 사용해서 보내주면 됩니다.
참고로 뒤쪽에 보이는 __dirname은 현재 작성하고 있는 파일의 절대 경로라는 의미임
구체적으로 server.js에서 __dirname을 써주면 server.js 파일의 절대 경로라는 겁니다.

app.listen('/', (요청, 응답) => {
    응답.sendFile(__dirname + '/index.html');
})

html문서 보내는 방법 알아봤구요. 이걸 라우팅이라고 함

--------------------------------------------------------

5강 웹페이지에 디자인 넣기

nodemon 라이브러리 설치하면 매번 서버 재시작할 필요없이
바뀐게 있으면 자동으로 재시작해주니까 설치하고 시작합시다.

명령문
npm install -g nodemon

이제 서버를 실행시킬때 node [파일명]이 아니라
nodemon [파일명]으로 실행시키면 됩니다.

스크립트 실행권한 문제 발생할 수 있는데 해결법을 알려드리면,
Windows 기준 Powershell을 관리자 권한으로 실행시키시구요.
Set-ExecutionPolicy RemoteSigned를 이용해 스크립트 실행 권한을 바꾸면 됩니다.
그 다음 get-ExecutionPolicy로 권한이 정상적으로 바뀌었는지 확인해보면 됨.

이제 html 문서에 css 파일을 적용해봅시다.
그냥 link 태그로 넣어주면 끝나는게 아니라 css파일이 있는 폴더를 등록해야합니다.

server.js 파일 상단에
app.use(express.static(__dirname + '/폴더명')); 을 입력해놓으면
폴더가 등록되구요.

이제 css 파일을 적용시킬 html 문서로 간 다음
<link href="/파일.css" rel="stylesheet"> 처럼 link 태그를 쓰면 됨
참고로 ./public/파일.css 이런식으로 경로를 다 쓰지 않는건
express 서버에 이미 경로를 이미 등록해놨기 때문입니다.
그래서 파일명만 입력하면 됩니다. 그렇게 해야 잘 작동함.

이번엔 네비게이션 바를 하나 만들어봅시다.
네비게이션 바는 bootstrap을 이용해서 기본 레이아웃을 가져와봅시다.
여기에 class명을 하나씩 추가해서 내가 원하는 스타일 디자인하면 됨

bootstrap을 사용할건데 사용하려면
link 태그랑 script 태그를 html 문서에 추가해줘야합니다.
link 태그 위치는 내가 만든 link 태그 위쪽
script는 body 태그 바로 위쪽이 좋습니다.
그리고 가져온 bootstrap 레이아웃에 클래스명을 추가해서 디자인하면 됩니다.

--------------------------------------------------------

6강 MongoDB

DB 유형을 살펴봅시다.
RDBMS ( 데이터의 정확도가 중요하다 )
SQL문을 사용해야하고 정규화가 필요합니다
데이터 정의도 해야하구요.

Non-relational Database ( 다양한 형식으로 데이터 저장 가능 )
(1) redis : key-value Database
(2) MongoDB : document Database
정규화 같은거 안해서 빠르게 입출력 가능합니다.
수정이나 삭제같은거 할때는 느릴 수 있습니다.
그래서 입출력이 빨라야하는 게시판이나 SNS를 만들때 적합하구요.

다만 사용 상황 이런게 딱 정해져있는건 아니고 경향이 그렇다는 것입니다.

MongoDB는
collection과 document 구조인데
쉽게 말해서 collection은 폴더라고 생각하면 되고
document는 Java Script의 object 자료형과 같은 형태입니다.
폴더에 object 자료형을 여러개 넣어놓는 것으로 비유할 수 있음

사용법 2가지
(1) 컴퓨터에 직접 설치
(2) 클라우드 호스팅 받기

여기선 클라우드 호스팅 받기로 진행해봅시다.
무료 용량
유료 업그레이드시 자동 백업
replica set : 분산 저장
full text search index 같은 기능을 제공해주기 때문에 편합니다.

우선 MongoDB.com 으로 접속해서 아이디를 등록하고
Free-tier로 DB 생성한 다음 여러가지 등록하시면 됩니다.

--------------------------------------------------------

7강 MongoDB 서버랑 연결하기

이제 MongoDB를 연결해봅시다.
세팅이 필요한데 먼저 라이브러리를 설치해줍시다.
npm install mongodb@5

그 다음 server.js에 코드를 작성하면 됨 ( server.js를 참고하시구요 )
관습적으로 DB 연결이 성공하고나서 서버를 실행시키는게 좋으니까
서버 실행 코드 위치도 바꿔줍시다.

이제 세팅은 끝났고 DB에 데이터 입력하는 법을 알아봅시다.

간단한 예시로 특정 url에 접속하면 데이터를 입력할 수 있도록 해보는 건 어떨까요
app.get('/input' (요청, 응답) => {
    여기에 db에 입력할 수 있는 코드작성하면 됨
})

db.collection(collection명).insertOne(object자료형)
으로 데이터를 입력할 수 있게 만들어주면 됩니다.

--------------------------------------------------------

8강 MongoDB에서 데이터 꺼내오기

documnet는 엑셀 행 1개에 해당합니다
documnet 1개에 데이터 100만개를 넣어도 되긴 하지만
엑셀 행 1개에 데이터 100만개 넣어서 쓰는 사람이 누가 있을까요
엑셀 행을 100만개 만드는게 나중에 document를 찾을때 빠르니까
알아두도록 합시다.

지금부터 할 건 글목록 페이지를 만들어보는건데요

async - await 문법 : 실행이 오래걸리는 코드는
건너뛰고 처리해버리는데 오래걸려도 건너뛰지말고 기다려달라고 
await을 쓰는것임
구체적으로는
async(요청, 응답) => {
    await db.collection(collection명).find().toArray()
}
이렇게 하시면 되고

아니면 async .then() 문법을 쓰면 됩니다.
async가 붙은 코드가 완료되면 then 메서드를 실행시켜달라는 것

예전에 쓰던 방법도 있는데요 바로 콜백함수를 사용하면 되는거구요
async toArray( () => {} ) 이런식으로 하면 됩니다.

근데 요즘 MongoDB는 async await 문법을 쓰라고 추천하기떄문에
이걸로 써보도록 합시다

참고로 await은 promise를 뱉는 곳에만 붙일 수 있습니다

이제부터는 Array 자료형와 Object 자료형를 간단히 살펴봅시다

(1) Array 자료형
var a = [3, 4, 5];
a[0]은 0번째 자료를 꺼내오는거니까 3이구요


(2) Object 자료형
var b = { name : 'kim', age : 20 }
b.name은 b의 name으로 자료를 찾아오는 겁니다. 'kim'이죠

MongoDB의 document는
[ {}, {} ] 이런식으로 데이터가 저장돼있기 때문에
let result = async db.collection('post').find().toArray();
0번째 자료의 title을 가져오고 싶다면
result[0].title 을 가져와서 사용자에게 보내주면 됩니다.

--------------------------------------------------------

9강 웹페이지에 DB 데이터 꽂기

Q. html 문서에 DB 데이터 꽂는법?
A. template engine을 사용하면 됨
템플릿 엔진은 여러가지가 있지만 이 중에서 새로운 문법을 사용하지 않는 ejs를 사용해봅시다.
npm install ejs로 설치하시면 됨.

Q. server.js에서 어떻게 사용하나요
A. app.set('view engine', 'ejs')를 server.js 상단에 세팅해주면 됩니다.

그리고 views라는 폴더를 만드시면 되는데 여기에 ejs파일을 만들거임.
ejs 파일이 뭐냐면 html 문서랑 똑같은데 차이점은 ejs 문법을 사용해서 DB 데이터를 넣을 수 있다는 것입니다.

ejs 파일을 유저에게 보내주려면
응답.send()가 아니라 응답.render()를 사용하시면 됩니다.
(참고로 응답은 1개만 가능하기 때문에 응답.send()가 이미 있다면 주석처리하거나 삭제해주시면 됨)

그리고 render() 메서드 안쪽에 파일명을 입력할때
기본경로가 views 폴더이기 때문에 바로 파일명만 입력하셔도 되는데
구체적으로 보여드리자면
응답.render('list.ejs'); 라고 하시면 됩니다.

그리고 보내고 싶은 데이터를 보내주시면 됨
응답.render('list.ejs', { 글목록 : result })

이런식으로 ejs 파일과 함께 보내줄 데이터를 함께 넣어주시면 됩니다.

그리고 ejs 파일에는 보내준 데이터를 어디에 넣을 것인지 구체적으로 위치를 지정해주시면 됩니다.
이때 <%= > 를 사용해주면 됩니다.

<%= JSON.stringify(글목록) %>
<%= 글목록[0].title %>
<%= 글목록[0].content %>

지금까지한게 서버사이드렌더링임.

--------------------------------------------------------

10강. 여러 글을 한 번에 출력하기 ( EJS 문법2 )

for 반복문 사용
자바스크립트 문법 쓰고 싶을때
<% %> 안쪽에 넣어주면 됨

include() 메서드
<%- include('nav.ejs') %>
해당 ejs 파일에 있던 html을 가져다가 넣어주는 문법임

<%= %>
<%- %>
<% %>

위 3개의 차이를 알아보자면
<%= %> 는 안쪽 내용이 html 형태라도 있는 그대로의 문자를 그대로 출력해줍니다.
<%- %> 는 안쪽 내용이 html 형태라면 해당 내용을 html 요소로 인식하고 렌더링해서 출력해줍니다.
<% %> 는 자바스크립트 문법을 사용하고 싶을때 앞뒤에 감싸주고 쓰십쇼.

--------------------------------------------------------

11강. 서버와 유저가 통신하는 법 ( RESTful API )

서버에게 요청하기 위해선 method와 URL을 정확히 적어서 보내야합니다.

method에는 GET, POST, PUT, UPDATE, DELETE 같은 것들이 있는데
각각을 쓰는 목적부터 살펴봅시다.

GET : 서버에 데이터를 출력 요청할때
POST : 서버에 데이터 입력 요청할때
PUT : 데이터를 수정 요청할때
DELETE : 데이터를 삭제 요청할때

여기서 요청은 정확히 말하자면 HTTP 요청이고
method는 HTTP method 입니다.

그리고 서버에 만들어놓은 method와 URL 조합으로 만든 기능 하나하나를 서버 API 라고 부릅니다.

app.get('/list', (요청, 응답) => {})

이런 서버 기능 하나하나를 서버 API라고 부릅니다.

REST API : representational state transfer 를 잘 따르는 API
간단히 말하면 좋은 API 디자인하는 6가지 원칙을 말하는겁니다.
1. uniform interface : 일관성있는 url이 좋다
2. Client - Server 역할 구분 : 유저가 서버 역할을 하거나 직접 DB 입출력 하지 않도록 하기
3. Stateless : 요청들은 의존성이 있으면 안된다
4. Cacheable : 서버에서 보내는 데이터는 캐싱이 가능해야함 ( 자주 요청 받는 자료는 브라우저에서 하드에 저장해놓고 뽑아쓰도록 하라는 거임 )
5. Layered System : 요청 1개가 최종 응답까지 여러 단계를 거쳐도 됨
6. Code on demand : 유저에게 실행가능한 코드를 보내줄 수도 있다

근데 추상적인 것도 많고 해서 관습적으로 
method와 url만 잘 기입해도 REST 하다고 말합니다

좋은 URL 작명 관습
1. 명사 위주
2. 띄어쓰기는 _말고 - 사용하기
3. 파일 확장자 쓰지 않기
4. 하위 문서들은 / 로 표기